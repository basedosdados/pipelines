---
name: Register flows (production)
on:
  push:
    branches: [main]
    paths:
      - .github/workflows/cd.yaml
      - pipelines/**/*
      - pyproject.toml
      - poetry.lock
      - Dockerfile
      # dbt files
      - models/**/*.sql
      - models/**/*.yml
      - macros/**/*
      - tests-dbt/**/*
      # dbt config files
      - dbt_project.yml
      - packages.yml
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GH_PAT: ${{ secrets.GH_PAT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  IMAGE_NAME: ghcr.io/basedosdados/prefect-flows
  PREFECT__BACKEND: cloud
  PREFECT__CLOUD__API: https://prefect.basedosdados.org/api
  PREFECT__CLOUD__PORT: 443
  PREFECT__SERVER__PROJECT: ${{ secrets.PREFECT__SERVER__PROJECT }}
  PREFECT_AUTH_TOML: ${{ secrets.PREFECT_AUTH_TOML }}
jobs:
  build-container:
    name: Register flows (production)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up poetry
        run: pipx install poetry
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          cache: poetry
          python-version: '3.10'
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true
      - name: Install Python dependencies for deploying
        run: |-
          poetry install --with=dev
      - name: Update image tag in constants
        run: |-
          poetry run python .github/workflows/scripts/replace_docker_tag.py $IMAGE_NAME $GITHUB_SHA
      - name: Get changed files for code tree analysis
        id: files
        uses: Ana06/get-changed-files@v2.1.0
      - name: Perform code tree analysis
        id: code-tree-analysis
        continue-on-error: true
        run: |
          poetry run python .github/workflows/scripts/code_tree_analysis.py "${{ steps.files.outputs.all }}" --write-to-file
      - name: Write auth.toml
        run: |-
          mkdir -p $HOME/.prefect
          echo $PREFECT_AUTH_TOML | base64 --decode > $HOME/.prefect/auth.toml
      - name: Wait for Docker image to be available
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: Build Docker image
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          verbose: true
      - name: Register Prefect flows
        run: |-
          poetry run python .github/workflows/scripts/register_flows.py --project $PREFECT__SERVER__PROJECT --path pipelines/ --schedule
      - name: Delete archieved flow runs
        run: poetry run python .github/workflows/scripts/delete_archieved_flow_runs.py
  table-approve:
    if: contains(github.event.pull_request.labels.*.name, 'table-approve')
    needs: build-container
    name: Table approve
    runs-on: ubuntu-latest
    steps:
      - name: Get PR that triggered the push
        id: get_pr
        uses: actions/github-script@v7
        with:
          script: |
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha
            });
            const commitSha = commits.data[0].sha;
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commitSha
            });
            if (prs.data.length === 0) {
              core.setFailed("No pull request found for this commit.");
            } else {
              const pr = prs.data[0];
              core.setOutput("pr_number", pr.number);
            }
      - name: Get PR labels
        id: check_label
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = core.getInput("pr_number") || '${{ steps.get_pr.outputs.pr_number }}';
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });
            const approved = labels.data.some(label => label.name === "table-approve");
            core.setOutput("table-approve", approved);
      - name: Get changed files in PR
        if: steps.check_label.outputs.table-approve == 'true'
        id: changed_files
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = core.getInput("pr_number") || '${{ steps.get_pr.outputs.pr_number }}';
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            const fileNames = files.data
              .filter(file => file.status !== 'removed')
              .map(f => f.filename)
              .join(', ');
            console.log("Changed files:", fileNames);
            core.setOutput("files", fileNames);
      - name: Set up poetry
        if: steps.check_label.outputs.table-approve == 'true'
        run: pipx install poetry==1.8.5
      - name: Set up python
        if: steps.check_label.outputs.table-approve == 'true'
        uses: actions/setup-python@v4
        with:
          cache: poetry
          python-version: '3.10'
      - name: Install requirements
        if: steps.check_label.outputs.table-approve == 'true'
        run: poetry install --only=dev
      - name: Run script for approving table
        if: steps.check_label.outputs.table-approve == 'true'
        run: |-
          poetry run python .github/workflows/scripts/table_approve.py --modified-files ${{ steps.changed_files.outputs.files }} --graphql-url ${{ secrets.BACKEND_GRAPHQL_URL }} --source-bucket-name ${{ vars.SOURCE_BUCKET_NAME }} --destination-bucket-name ${{ vars.DESTINATION_BUCKET_NAME }} --backup-bucket-name ${{ vars.BACKUP_BUCKET_NAME }} --prefect-backend-token ${{ secrets.PREFECT_AUTH_TOML }} --materialization-target ${{ vars.MATERIALIZATION_TARGET }} --materialization-label ${{ vars.MATERIALIZATION_LABEL }}
